@model WEBPOS.Models.ItemModel

@{
    ViewBag.Title = "Detalle de Articulo";
    Layout = "~/Views/Shared/_ActionLayout.cshtml";
}
@using (Html.BeginForm("ItemManage", "Item", FormMethod.Post, new { id = "itemForm" }))
{
    <br />
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Código")
                    @Html.EditorFor(model => model.ItemCode, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Código de Barras")
                    @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Descripción")
                    @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Departamento")
                    @{
                        List<SelectListItem> dptList = new List<SelectListItem>();
                        foreach (var ob in WEBPOS.DataAccess.BusinessLayer.BlDepartment.ReadAll())
                        {
                            dptList.Add(new SelectListItem { Text = ob.DepartmentCode + " | " + ob.DepartmentDescription, Value = ob.DepartmentCode });
                        }
                    }
                    @Html.DropDownListFor(model => model.DepartmentCode, dptList, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Peso Neto")
                    @Html.EditorFor(model => model.NetWeight, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                    <br />
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Suplidor")
                    @{
                        List<SelectListItem> bpList = new List<SelectListItem>();
                        foreach (var ob in WEBPOS.DataAccess.BusinessLayer.BlBusinessPartner.ReadAllQueryable().Where(x => x.BusinessPartnerType == "S"))
                        {
                            bpList.Add(new SelectListItem { Text = ob.BusinessPartnerCode + " | " + ob.BusinessPartnerDescription, Value = ob.BusinessPartnerCode });
                        }
                    }
                    @Html.DropDownListFor(model => model.SupplierCode, bpList, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Unidad de medida")
                    @{
                        List<SelectListItem> unitMeasureList = new List<SelectListItem>();
                        foreach (var ob in WEBPOS.DataAccess.BusinessLayer.BlUnitMeasure.ReadAll())
                        {
                            unitMeasureList.Add(new SelectListItem { Text = ob.UnitMeasureCode + " | " + ob.UnitMeasureDescription, Value = ob.UnitMeasureCode });
                        }
                    }
                    @Html.DropDownListFor(model => model.UnitMeasureCode, unitMeasureList, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Impuesto")
                    @{
                        List<SelectListItem> taxList = new List<SelectListItem>();
                        foreach (var ob in WEBPOS.DataAccess.BusinessLayer.BlTax.ReadAll())
                        {
                            taxList.Add(new SelectListItem { Text = ob.TaxCode + " | " + ob.TaxDescription, Value = ob.TaxCode });
                        }
                    }
                    @Html.DropDownListFor(model => model.TaxCode, taxList, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-9">
                    @Html.Label("Desactivado")
                    @Html.CheckBoxFor(model => model.IsVoided, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="form-group">
                <div class="col-md-9">
                   
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-default" type="submit">Guardar</button>
}
<div class="panel panel-default" style="width: 100%; padding: 10px; margin: 10px">
    <div id="Tabs" role="tabpanel">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li class="active">
                <a href="#prices" aria-controls="prices" role="tab" data-toggle="tab">
                    Precios
                </a>
            </li>
            <li><a href="#warehouses" aria-controls="warehouses" role="tab" data-toggle="tab">Almacenes</a></li>
        </ul>
        <!-- Tab panes -->
        <div class="tab-content" style="padding-top: 20px">
            <div role="tabpanel" class="tab-pane active" id="prices">

                <div style="width:90%; margin:0 auto;">
                    @{ if (!string.IsNullOrEmpty(Model.ItemDescription))
                        {
                            if (Model.canEdit)
                            {
                                <a href='#' class='btn btn-primary new' onclick=onPriceNew('0');>Nuevo Precio</a>
                            }
                        }
                    }
                    <table id="priceGrid" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Lista de Precio</th>
                                <th>Precio de Venta</th>
                                <th>Detalles</th>
                                <th>Eliminar</th>
                            </tr>
                        </thead>
                    </table>
                </div>

            </div>
            <div role="tabpanel" class="tab-pane" id="warehouses">

                <div style="width:90%; margin:0 auto;">
                    @{ if (!string.IsNullOrEmpty(Model.ItemDescription))
                        {
                            if (Model.canEdit)
                            {
                                <a href='#' class='btn btn-primary new' onclick=onWarehouseNew('0');>Nuevo Almacen</a>
                            }
                        }
                    }
                    <table id="warehouseGrid" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Descripción</th>
                                <th>Cantidad en Mano</th>
                                <th>Detalles</th>
                                <th>Eliminar</th>
                            </tr>
                        </thead>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div id="modalContainer"></div>
</div>
<script>
    $(document).ready(function () {
        $("#ItemCode").prop('readonly', true);
            @*if (@Model.ItemCode!="")
            {
                $("#ItemCode").prop('readonly', true);
            }*@
    });
    var priceTable = $("#priceGrid").DataTable({

        "processing": true, // for show progress bar
        "serverSide": true, // for process server side
        "filter": true, // this is for disable filter (search box)
        "orderMulti": false, // for disable multiple column at once
        "pageLength": 5,
        "language": {
            "url": "//cdn.datatables.net/plug-ins/1.10.19/i18n/Spanish.json"
        },
        "ajax": {
            "url": "/Item/PriceLoadData/@Model.ItemCode",
            "type": "POST",
            "datatype": "json"
        },

        "columnDefs":
            [{
                "targets": [0],
                "searchable": false,
                "orderable": false
            },
            {
                "targets": [1],
                "searchable": false,
                "orderable": false,
                "type": "num-fmt"
            },
            {
                "targets": [2],
                "searchable": false,
                "orderable": false,
            },
            {
                "targets": [3],
                "searchable": false,
                "orderable": false,
            }],

        "columns": [
            { "data": "PriceList", "name": "PriceList", "autoWidth": true },
            { "render": function (data, type, full, meta) { return "(RD$)" + full.SellPrice.toFixed(2); } },
            {
                "render": function (data, type, full, meta) { return "<a class='btn btn-info' href='#' onclick=onPriceEdit('" + full.PriceListCode + "'); >Ver</a>"; }
            },
            {
                data: null, render: function (data, type, row) {
                    return "<a href='#' class='btn btn-danger' onclick=onPriceDelete('" + row.PriceListCode + "'); >Eliminar</a>";
                }
            },
        ]
    });

    function onPriceDelete(priceListCode) {
        if ('@Model.canEdit' == 'True') {
            if (confirm("¿Seguro que desea eliminar?")) {
                var url = '@Url.Action("PriceDelete","Item", new { itemCode = Model.ItemCode, priceListCode = "XX" })';
                url = url.replace("XX", priceListCode);
                $.get(url, function (data) {
                    priceTable.ajax.reload();
                });
            }
        }
        else {
            alert('Usted no tiene los permisos requeridos para esta funcion. Contacte con su Administrador');
        }
    }

    function onPriceNew(id) {
        var url = '@Url.Action("PriceEditPartial","Item", new { itemCode = Model.ItemCode, priceListCode = "0" })';

        $('#modalContainer').load(url, function () {
            $('#myModal').modal('show');
        });
    }

    function onPriceEdit(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("PriceEditPartial", "Item")',
            data: { itemCode: '@Model.ItemCode', priceListCode: id },
            success: function (data) {
                $('#modalContainer').html(data);
                $('#myModal').modal('show');
                $('#PriceListCode').prop('readonly', true);
            },
        });
    }

    function onFormSubmit(s, e) {
        var form = $("#dataForm")[0];
        var data = $("#dataForm").serialize();

        $.ajax({
            url: form.action,
            type: form.method,
            data: data,
            beforeSend: function () {

            },
            complete: function () {

            },
            success: function (result) {
                $('#myModal').modal('hide');
                //toastr.success('Datos guardados', 'Guardado');
                priceTable.ajax.reload();
                warehouseTable.ajax.reload();
            }
        });
    }

    var warehouseTable = $("#warehouseGrid").DataTable({

        "processing": true, // for show progress bar
        "serverSide": true, // for process server side
        "filter": false, // this is for disable filter (search box)
        "orderMulti": false, // for disable multiple column at once
        "pageLength": 5,
        "language": {
            "url": "//cdn.datatables.net/plug-ins/1.10.19/i18n/Spanish.json"
        },
        "ajax": {
            "url": "/Item/WarehouseLoadData/@Model.ItemCode",
            "type": "POST",
            "datatype": "json"
        },

        "columnDefs":
            [{
                "targets": [0],
                "searchable": false,
                "orderable": false
            },
            {
                "targets": [1],
                "searchable": false,
                "orderable": false,
                "type": "num-fmt"
            },
            {
                "targets": [2],
                "searchable": false,
                "orderable": false,
            },
            {
                "targets": [3],
                "searchable": false,
                "orderable": false,
            }],

        "columns": [
            { "data": "Warehouse", "name": "WarehouseDescription", "autoWidth": true },
            { "render": function (data, type, full, meta) { return full.QuantityOnHand.toFixed(2); } },
            {
                "render": function (data, type, full, meta) { return "<a class='btn btn-info' href='#' onclick=onWarehouseEdit('" + full.WarehouseCode + "'); >Ver</a>"; }
            },
            {
                data: null, render: function (data, type, row) {
                    return "<a href='#' class='btn btn-danger' onclick=onWarehouseDelete('" + row.WarehouseCode + "'); >Eliminar</a>";
                }
            },
        ]
    });

    function onWarehouseDelete(warehouseCode) {
        if ('@Model.canEdit' == 'True') {
            if (confirm("¿Seguro que desea eliminar?")) {
                var url = '@Url.Action("WarehouseDelete","Item", new { itemCode = Model.ItemCode, warehouseCode = "XX" })';
                url = url.replace("XX", warehouseCode);
                $.get(url, function (data) {
                    warehouseTable.ajax.reload();
                });
            }
        }
        else {
            alert('Usted no tiene los permisos requeridos para esta funcion. Contacte con su Administrador');
        }
    }

    function onWarehouseNew(id) {
        var url = '@Url.Action("WarehouseEditPartial","Item", new { itemCode = Model.ItemCode, warehouseCode = "0" })';

        $('#modalContainer').load(url, function () {
            $('#myModal').modal('show');
        });
    }

    function onWarehouseEdit(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("WarehouseEditPartial", "Item")',
            data: { itemCode: '@Model.ItemCode', warehouseCode: id },
            success: function (data) {
                $('#modalContainer').html(data);
                $('#myModal').modal('show');
                //$('#WarehouseCode').attr("disabled", "disabled");
            },
        });
    }
</script>